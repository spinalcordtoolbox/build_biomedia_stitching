name: Build stitching binary
on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name'
        required: true
  pull_request:
    branches:
      - '*'

env:
  THIRD_PARTY_DIR: "3rdParty"

jobs:
  build-unix:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
    name: Build stitching binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    steps:
    - uses: actions/checkout@main
      with:
        repository: biomedia-mira/stitching   
        ref: ${{ github.event.inputs.git_ref || 'd31242797e0438c5de7f5fc69b14697f71c090d5' }} 

    - name: Download Eigen
      run: |
        mkdir ${{ env.THIRD_PARTY_DIR }}
        cd ${{ env.THIRD_PARTY_DIR }}
        wget https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz --progress=bar:force:noscroll
        mkdir eigen
        tar xf eigen-3.3.7.tar.gz -C eigen --strip-components=1

    - name: Download and build Boost
      run: |
        cd ${{ env.THIRD_PARTY_DIR }}
        wget https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz --progress=bar:force:noscroll
        tar xf boost_1_80_0.tar.gz
        cd boost_1_80_0/
        # build Boost
        ./bootstrap.sh
        ./b2 link=static

    - name: Download and build ITK
      run: |
        cd ${{ env.THIRD_PARTY_DIR }}
        wget https://sourceforge.net/projects/itk/files/itk/5.0/InsightToolkit-5.0.0.tar.gz --progress=bar:force:noscroll
        tar xf InsightToolkit-5.0.0.tar.gz
        cd InsightToolkit-5.0.0
        mkdir build
        cd build
        cmake \
            -DBUILD_EXAMPLES:BOOL=OFF \
            -DBUILD_TESTING:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ env.THIRD_PARTY_DIR }}/itk \
          ..
        make -j$(nproc)
        make install

    ####################################################################################################################
    # The following fixes are used to patch files present in the `stitching` repository. If possible, that repo should #
    # instead be forked, and these fixes should be applied directly to the files themselves.                           #
    ####################################################################################################################
    - name: Ensure static linking of Boost libraries
      run: |
        # See: https://github.com/spinalcordtoolbox/spinalcordtoolbox/pull/3865#discussion_r957565175
        echo "" >> itkio/cmake/FindConfig.cmake
        echo "set(Boost_USE_STATIC_LIBS ON)" >> itkio/cmake/FindConfig.cmake
        echo "" >> stitching/cmake/FindConfig.cmake
        echo "set(Boost_USE_STATIC_LIBS ON)" >> stitching/cmake/FindConfig.cmake

    - name: Ensure C++11 is used to build mia
      run: |
        # This syntax is meant to prepend text to a file, see: https://stackoverflow.com/a/27950358
        printf '%s\n%s\n' "set(CMAKE_CXX_STANDARD 11)" "$(cat mia/CMakeLists.txt)" > mia/CMakeLists.txt
    ####################################################################################################################

    - name: Build stitching
      run: |
        mkdir build
        cd build
        export THIRD_PARTY_DIR=../${{ env.THIRD_PARTY_DIR }}
        export ITK_DIR=../${{ env.THIRD_PARTY_DIR }}/InsightToolkit-5.0.0/build
        export CMAKE_PREFIX_PATH=../${{ env.THIRD_PARTY_DIR }}/boost_1_80_0/stage/lib/cmake/
        cmake ..
        make -j$(nproc)

    - name: Verify dynamic linking (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      run: ldd build/stitching/stitching

    - name: Verify dynamic linking (macOS)
      if: matrix.os == 'macos-10.15'
      run: otool -L build/stitching/stitching

    - name: Package files
      run: |
        mkdir archive
        cp build/stitching/stitching archive
        mkdir archive/copyright
        cp LICENSE archive/copyright/LICENSE_stitching.txt
        tar -zcvf stitching_${{ matrix.os }}.tar.gz archive/

    - name: Upload packaged archive
      uses: actions/upload-artifact@v2-preview
      with:
        name: stitching_${{ matrix.os }}
        path: stitching_${{ matrix.os }}.tar.gz

  build-windows:
    strategy:
      matrix:
        os: [windows-2019]
    name: Build stitching binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@main
      with:
        repository: biomedia-mira/stitching
        ref: ${{ github.event.inputs.git_ref || 'd31242797e0438c5de7f5fc69b14697f71c090d5' }}

    # This action sets up 'cl.exe', which is needed for Boost's `bootstrap.bat`
    - name: Enable developer command prompt
      uses: ilammy/msvc-dev-cmd@v1

    # This action sets up 'msbuild.exe', which is a Windows equivalent to make/clang/etc.
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64

    - name: Download Eigen
      run: |
        mkdir ${{ env.THIRD_PARTY_DIR }}
        cd ${{ env.THIRD_PARTY_DIR }}
        curl https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz -o eigen-3.3.7.tar.gz -L
        mkdir eigen
        tar xf eigen-3.3.7.tar.gz -C eigen --strip-components=1

    - name: Download and setup Boost
      shell: cmd
      working-directory: ${{ env.THIRD_PARTY_DIR }}
      run: |
        curl https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz -o boost_1_80_0.tar.gz -L
        tar xf boost_1_80_0.tar.gz
        cd boost_1_80_0
        bootstrap.bat

    - name: Build Boost
      shell: cmd
      working-directory: ${{ env.THIRD_PARTY_DIR }}/boost_1_80_0
      run: .\b2 link=static

    - name: Download and setup ITK
      working-directory: ${{ env.THIRD_PARTY_DIR }}
      run: |
        curl https://sourceforge.net/projects/itk/files/itk/5.0/InsightToolkit-5.0.0.tar.gz -o InsightToolkit-5.0.0.tar.gz -L
        tar xf InsightToolkit-5.0.0.tar.gz
        cd InsightToolkit-5.0.0
        # Hotfix for https://github.com/SuperElastix/SimpleElastix/pull/425#issuecomment-878516818
        sed -i '93,120d' Modules/ThirdParty/OpenJPEG/src/openjpeg/opj_includes.h
        mkdir build
        cd build
        cmake \
            -DBUILD_EXAMPLES:BOOL=OFF \
            -DBUILD_TESTING:BOOL=OFF \
            -DITK_SKIP_PATH_LENGTH_CHECKS=ON \
          ..

    - name: Build ITK
      shell: cmd
      working-directory: ${{ env.THIRD_PARTY_DIR }}/InsightToolkit-5.0.0/build
      run: msbuild ALL_BUILD.vcxproj -property:Configuration=Release

    - name: Setup stitching
      run: |
        mkdir build
        cd build
        export THIRD_PARTY_DIR=../${{ env.THIRD_PARTY_DIR }}
        export ITK_DIR=../${{ env.THIRD_PARTY_DIR }}/InsightToolkit-5.0.0/build
        export CMAKE_PREFIX_PATH=../${{ env.THIRD_PARTY_DIR }}/boost_1_80_0/stage/lib/cmake/
        cmake ..

    - name: Build stitching
      shell: cmd
      working-directory: build
      run: msbuild ALL_BUILD.vcxproj -property:Configuration=Release

    - name: Package files
      run: |
        mkdir archive
        cp build/stitching/bin/Release/stitching.exe archive
        mkdir archive/copyright
        cp LICENSE archive/copyright/LICENSE_stitching.txt
        tar -zcvf stitching_${{ matrix.os }}.tar.gz archive/

    - name: Upload packaged archive
      uses: actions/upload-artifact@v2-preview
      with:
        name: stitching_${{ matrix.os }}
        path: stitching_${{ matrix.os }}.tar.gz

  release:
    needs: [build-unix, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # name the release with the run_id to allow multiple builds on the same branch/tag
          # https://github.com/actions/create-release/issues/2#issuecomment-613591846
          tag_name: ${{ github.event.inputs.release_name }}
          release_name: Release ${{ github.event.inputs.release_name }}
          draft: true
          prerelease: true

      - uses: actions/download-artifact@v1
        with:
          name: stitching_ubuntu-20.04
        continue-on-error: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./stitching_ubuntu-20.04/stitching_ubuntu-20.04.tar.gz
          asset_name: stitching_ubuntu-20.04.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true

      - uses: actions/download-artifact@v1
        with:
          name: stitching_macos-10.15
        continue-on-error: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./stitching_macos-10.15/stitching_macos-10.15.tar.gz
          asset_name: stitching_macos-10.15.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true

      - uses: actions/download-artifact@v1
        with:
          name: stitching_windows-2019
        continue-on-error: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./stitching_windows-2019/stitching_windows-2019.tar.gz
          asset_name: stitching_windows-2019.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true
